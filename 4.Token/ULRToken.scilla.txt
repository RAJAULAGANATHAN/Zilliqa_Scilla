library ULRToken

let one_msg = 
  fun (msg : Message) => 
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

let no_msg = Nil {Message}



let lessthan_check =
  fun (a : Uint128) => fun (b : Uin128) =>
    let x = builtin lt a b in
    match x with
    | True => True
    | False =>
      let y = builtin eq a b in
      
      match y with
      | True => True
      | False => False
      end
    end
    
    

    
    
    
contract ULRToken
(owner:Address,
total_Supply:Uint128)



field balance_set : Map Address Uint128 = 
    let m = Emp Address Uint128 in
    builtin put  m owner total_Supply
    
    
    
field allowance_map :  Map Address (Map Address Uint128)  =
   Emp  Address (Map Address Uint128)  
   


  
transition balanceOf(token_Holder : Address)

        b1 <- balance_set;
        k = builtin  get b1 token_Holder;
         
        match k with
            |Some v =>
              m2 = {_tag:"Balance Of";_recipient:_sender;_amount:Uint128 0;bal:v};
              m2s = one_msg m2;
              send m2s
            
            |None =>
              m2 = {_tag:"Balance Of N";_recipient:_sender;_amount:Uint128 0;bal : Uint128 0};
              m2s = one_msg m2;
              send m2s
         end
end
   
   
   

transition totalSupply()
            m2 = {_tag:"Total Supply";_recipient:_sender;_amount:Uint128 0;bal:total_Supply};
            m2s = one_msg m2;
            send m2s
end



transition  transferr(to_Add : Address,amount : Uint128)
owner_check = builtin eq owner _sender;

match owner_check with
 |True =>
   b1<-balance_set;
   _sender_bal=builtin get b1 _sender;

 match _sender_bal with
    |Some v1 => 
        ls_ck = lessthan_check amount v1;
        
  match ls_ck with
      |True=>
        subbal = builtin sub v1  amount; 
        new_balance = builtin put  b1  _sender subbal;
        balance_set:=new_balance;
        b2<-balance_set;
        new_balance1 = builtin  get b2 _sender;
          
       
        to_balance1 = builtin get b2 to_Add;
    match  to_balance1 with
        |Some v3=>
            reciever_balance = builtin add v3 amount;
            to_balance = builtin put  b2  to_Add reciever_balance;
            balance_set:= to_balance;
            b3<-balance_set;
            to_balance2 =  builtin  get b3 to_Add;
        
        match  to_balance2  with
            |Some v2 =>
               ms = {_tag:"To Balance Updated";_recipient:_sender;_amount:Uint128 0;to_Addresss_Balance:v2};
               ms1 = one_msg ms;
               send ms1
               end
                     
                 
        |None=>
            to_balance = builtin put  b2  to_Add amount;
            balance_set:= to_balance;
            b3<-balance_set;
            to_balance3 =  builtin  get b3 to_Add;
                      
        match  to_balance3  with
              |Some v2 =>
                 ms = {_tag:"New To Balance";_recipient:_sender;_amount:Uint128 5;to_Addresss_Balance:v2};
                 ms1 = one_msg ms;
                 send ms1
        end
        end
    end
   end    
  end
 end
                   


transition approval(_reciverAddr:Address,_amountRange:Uint128)
am1 <- allowance_map;

allowance_check = builtin get am1 _sender;
 match allowance_check with
    |Some v=>
        set_Allowance = builtin put v _reciverAddr _amountRange;
        set_Allowance1 = builtin put am1 _sender set_Allowance;
        allowance_map:=set_Allowance1;
        send no_msg
        

   |None=>
        set_Allowance = let m = Emp Address Uint128 in builtin put m _reciverAddr _amountRange;
        set_Allowance1 = builtin put am1 _sender set_Allowance;
        allowance_map := set_Allowance1;
        send no_msg
 end
end




transition allowance(_tOwner:Address,_reciverAddr:Address)
am2<-allowance_map;

allowance_check1 = builtin get am2 _tOwner;

 match allowance_check1 with
    |Some v1 =>
        allowance_check2= builtin get am2 _reciverAddr;
        
        match allowance_check2 with
            |Some v2 =>
                 ms = {_tag:"Allowance";_recipient:_sender;_amount:Uint128 0;allowance_Approved:v2};
                 mss = one_msg ms;
                 send mss
            |None =>
                ms = {_tag:"Allowance_N";_recipient:_sender;_amount:Uint128 0;allowance_Approved:Uint128 0};
                mss = one_msg ms;
                 send mss
                 
    |None=>
        ms1={_tag:"Allowance Not Setted";_recipient:_sender;_amount:Uint128 0};
        mss1 = one_msg ms1;
        send mss1
            end
 end
end




transition transferFrom(fromAdd:Address,toAdd:Address,tokenVal:Uint128)
bm1 <- balance_set;
am1 <- allowance_map;

alwn_check1 = builtin get am1 fromAdd;

match alwn_check1 with
    |Some v1 =>
        alwn_check2 = builtin get am1 toAdd;
        
        match alwn_check2 with
            |Some v2 =>
                conf_check1 = builtin lt tokenVal v2;
                
                match conf_check1 with
                |True=>
                    bal_check1 = builtin get bm1 fromAdd;
                    
                    match bal_check1 with
                        |Some v3=>
                            conf_check2 = builtin lt tokenVal v3;
                            
                            match conf_check2 with 
                                |True =>
                                    frm_Bal1= builtin sub v3 tokenVal;
                                    frm_Bal2 = builtin put bm1 fromAdd frm_Bal1;
                                    balance_set:=frm_Bal2;
                                    bm2 <- balance_set;
                                    frm_Bal3 = builtin get bm2 fromAdd;
                                    
                                    to_Bal1 = builtin get bm2 toAdd;
                                    
                                    match to_Bal1 with
                                        |Some v4=>
                                            to_Bal2 = builtin add v4 tokenVal;
                                            to_Bal3 = builtin put bm2 toAdd to_Bal2;
                                            
                                            balance_set:=to_Bal3;
                                            bm3<-balance_set;
                                            
                                            to_Bal4 = builtin get bm3 toAdd;
                                            match to_Bal4 with
                                                |Some v5 =>
                                                    tfmsg = {_tag:"TF1";_recipient:_sender;_amount:Uint128 0;to_balance:v5};
                                                    tfmsg1= one_msg tfmsg;
                                                    send tfmsg1
                                                    
                                        |None=>
                                            to_Bal5 = builtin put bm2 toAdd tokenVal;
                                            balance_set:=to_Bal5;
                                            bm4<-balance_set;
                                            
                                            to_Bal6 = builtin get bm4 toAdd;
                                            match to_Bal6 with
                                                |Some v6=>
                                                    tfmsg2 = {_tag:"TF2";_recipient:_sender;_amount:Uint128 0;to_balance1:v6};
                                                    tfmsg3 = one_msg tfmsg2;
                                                    send tfmsg3
                                                    end
                                                    end
                                                    end
                                                    
                       |None=>
                           send no_msg
                           end
                                                   
                |False=>
                    send no_msg
                    end       
            end
        end             
        
 end
end
